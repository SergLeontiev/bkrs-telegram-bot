#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sqlite3
import asyncio
from typing import Optional, Tuple, Dict
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, InlineQueryHandler
import uuid

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á debouncing –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_search_tasks: Dict[int, asyncio.Task] = {}

def assemble_database_if_needed():
    """–°–æ–±–∏—Ä–∞–µ—Ç –±–∞–∑—É –∏–∑ —á–∞—Å—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if os.path.exists('dictionary.sqlite'):
        return True
        
    print("–ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ —á–∞—Å—Ç–µ–π...")
    
    parts = []
    for filename in sorted(os.listdir('.')):
        if filename.startswith('dictionary_part_'):
            parts.append(filename)
    
    if not parts:
        print("‚ùå –ß–∞—Å—Ç–∏ –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
        
    print(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π: {len(parts)}")
    
    with open('dictionary.sqlite', 'wb') as outfile:
        for part in parts:
            print(f"–î–æ–±–∞–≤–ª—è–µ–º {part}...")
            with open(part, 'rb') as infile:
                outfile.write(infile.read())
    
    size_mb = os.path.getsize('dictionary.sqlite') / (1024*1024)
    print(f"‚úÖ –ë–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞! –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
    return True

class ChineseDictionaryBot:
    def __init__(self, db_path: str = "dictionary.sqlite"):
        self.db_path = db_path
        
    def lookup(self, chinese_word: str) -> Optional[Tuple[str, str, str]]:
        """–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤ SQLite –±–∞–∑–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT hanzi, pinyin, translation FROM dict 
                WHERE hanzi = ?
            ''', (chinese_word,))
            
            result = cursor.fetchone()
            return result if result else None
            
        except sqlite3.Error:
            return None
        finally:
            conn.close()
        
    def format_output(self, result: Tuple[str, str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, –ø–∏–Ω—å–∏–Ω—å, –ø–µ—Ä–µ–≤–æ–¥"""
        hanzi, pinyin, translation = result
        
        # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        if translation:
            translation = translation.replace('\\n', '\n')
        
        return f"{hanzi}\n{pinyin}\n{translation}"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_dict = ChineseDictionaryBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –ò–µ—Ä–æ–≥–ª–∏—Ñ—ã\n"
        "‚Ä¢ –ü–∏–Ω—å–∏–Ω—å (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è)\n" 
        "‚Ä¢ –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n\n"
        "–ü—Ä–∏–º–µ—Ä: ‰Ω†Â•Ω"
    )

async def bkrs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /bkrs –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bkrs –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã\n"
            "–ü—Ä–∏–º–µ—Ä: /bkrs ‰Ω†Â•Ω"
        )
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    chinese_input = ' '.join(context.args).strip()
    
    result = bot_dict.lookup(chinese_input)
    
    if result:
        translation = bot_dict.format_output(result)
        await update.message.reply_text(translation)
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{chinese_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

async def perform_search(query: str, inline_query_id: str, user_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        # –ñ–¥–µ–º 500ms –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        await asyncio.sleep(0.5)
        
        # –ò—â–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ
        result = bot_dict.lookup(query)
        
        if result:
            hanzi, pinyin, translation = result
            # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            if translation:
                translation = translation.replace('\\n', '\n')
            
            formatted_result = f"{hanzi}\n{pinyin}\n{translation}"
            
            results = [
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title=f"{hanzi}",
                    description=f"{pinyin} - {translation[:50]}{'...' if len(translation) > 50 else ''}",
                    input_message_content=InputTextMessageContent(formatted_result)
                )
            ]
        else:
            # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            results = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª)
        try:
            from telegram import Bot
            bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
            await bot.answer_inline_query(inline_query_id, results)
        except:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–∑–∞–ø—Ä–æ—Å –º–æ–≥ —É—Å—Ç–∞—Ä–µ—Ç—å)
            pass
            
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–µ—á–∞—Ç–∞—Ç—å)
        pass
    finally:
        # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if user_id in user_search_tasks:
            del user_search_tasks[user_id]

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ (@bkrs_leo_bot —Å–ª–æ–≤–æ) —Å debouncing"""
    query = update.inline_query.query.strip()
    user_id = update.inline_query.from_user.id
    inline_query_id = update.inline_query.id
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_search_tasks:
        user_search_tasks[user_id].cancel()
    
    if not query:
        # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await update.inline_query.answer([])
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    search_task = asyncio.create_task(
        perform_search(query, inline_query_id, user_id)
    )
    user_search_tasks[user_id] = search_task

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)"""
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if update.message.chat.type != 'private':
        return
        
    chinese_input = update.message.text.strip()
    
    result = bot_dict.lookup(chinese_input)
    
    if result:
        translation = bot_dict.format_output(result)
        await update.message.reply_text(translation)
    else:
        await update.message.reply_text("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not assemble_database_if_needed():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        return
    
    application = Application.builder().token(token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("bkrs", bkrs_command))
    application.add_handler(InlineQueryHandler(inline_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()